<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zakary Zhu&#39;s Blog</title>
  
  <subtitle>Try to find the way about self-improvement.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zakarycode.github.io/"/>
  <updated>2019-04-23T03:18:58.000Z</updated>
  <id>https://zakarycode.github.io/</id>
  
  <author>
    <name>ZakaryCode</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重学前端</title>
    <link href="https://zakarycode.github.io/archives/front-end/1555989538.html"/>
    <id>https://zakarycode.github.io/archives/front-end/1555989538.html</id>
    <published>2019-04-23T03:18:58.000Z</published>
    <updated>2019-04-23T03:18:58.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近有在学习 winter 老师的重学前端课程整理，打算根据课程的内容整理一下自己的前端知识体系，总的来说还是下面的标题进行梳理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a
        
      
    
    </summary>
    
      <category term="前端" scheme="https://zakarycode.github.io/categories/front-end/"/>
    
    
      <category term="笔记" scheme="https://zakarycode.github.io/tags/record/"/>
    
      <category term="重学前端" scheme="https://zakarycode.github.io/tags/Relearning-front-end/"/>
    
  </entry>
  
  <entry>
    <title>前端工程实践</title>
    <link href="https://zakarycode.github.io/archives/front-end/Engineering-Practice/1555988596.html"/>
    <id>https://zakarycode.github.io/archives/front-end/Engineering-Practice/1555988596.html</id>
    <published>2019-04-23T03:03:16.000Z</published>
    <updated>2019-04-23T03:03:16.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;xing-neng&quot;&gt;&lt;a class=&quot;header-anchor&quot;
        
      
    
    </summary>
    
      <category term="前端" scheme="https://zakarycode.github.io/categories/front-end/"/>
    
      <category term="工程化" scheme="https://zakarycode.github.io/categories/front-end/Engineering-Practice/"/>
    
    
      <category term="笔记" scheme="https://zakarycode.github.io/tags/record/"/>
    
      <category term="重学前端" scheme="https://zakarycode.github.io/tags/Relearning-front-end/"/>
    
      <category term="持续集成" scheme="https://zakarycode.github.io/tags/Continuous-Integration/"/>
    
      <category term="部署" scheme="https://zakarycode.github.io/tags/deployment/"/>
    
      <category term="Web开发" scheme="https://zakarycode.github.io/tags/Web-Development/"/>
    
      <category term="框架" scheme="https://zakarycode.github.io/tags/frame/"/>
    
      <category term="性能" scheme="https://zakarycode.github.io/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 整理</title>
    <link href="https://zakarycode.github.io/archives/front-end/JavaScript/1555988415.html"/>
    <id>https://zakarycode.github.io/archives/front-end/JavaScript/1555988415.html</id>
    <published>2019-04-23T03:00:15.000Z</published>
    <updated>2019-04-25T03:34:15.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;  在 JavaScript 的模块中,首先我们可以把语言按照文法、语义和运行时来拆分,这符合编程语言的一般规律: &lt;strong&gt;用一定的词法和语句,表达一定语句,从而操作运行时&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zakarycode.github.io/categories/front-end/"/>
    
      <category term="JavaScript" scheme="https://zakarycode.github.io/categories/front-end/JavaScript/"/>
    
    
      <category term="笔记" scheme="https://zakarycode.github.io/tags/record/"/>
    
      <category term="重学前端" scheme="https://zakarycode.github.io/tags/Relearning-front-end/"/>
    
      <category term="JavaScript" scheme="https://zakarycode.github.io/tags/JavaScript/"/>
    
      <category term="ECMAScript" scheme="https://zakarycode.github.io/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS 整理</title>
    <link href="https://zakarycode.github.io/archives/front-end/CSS/1555987337.html"/>
    <id>https://zakarycode.github.io/archives/front-end/CSS/1555987337.html</id>
    <published>2019-04-23T02:42:17.000Z</published>
    <updated>2019-04-23T02:42:17.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;同样也是按照语言和功能来划分，语言部分从大到小有各种语法结构，比如@rule、选择器、单位等等；功能的部分大致可以分为布局、绘制和交互类。&lt;/p&gt;
&lt;p&gt;在布局类我们常用的布局有: 正常流和弹性布局；绘制类则分成图形相关和文字相关的绘制；最后则是动画和其他的交互。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zakarycode.github.io/categories/front-end/"/>
    
      <category term="CSS" scheme="https://zakarycode.github.io/categories/front-end/CSS/"/>
    
    
      <category term="笔记" scheme="https://zakarycode.github.io/tags/record/"/>
    
      <category term="重学前端" scheme="https://zakarycode.github.io/tags/Relearning-front-end/"/>
    
      <category term="CSS" scheme="https://zakarycode.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML 整理</title>
    <link href="https://zakarycode.github.io/archives/front-end/HTML/1555987336.html"/>
    <id>https://zakarycode.github.io/archives/front-end/HTML/1555987336.html</id>
    <published>2019-04-23T02:42:16.000Z</published>
    <updated>2019-04-23T02:42:16.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;HTML 可以按照功能和语言来划分它的知识，HTML 的知识主要由标签来承担，所以我们首先会把标签做一些分类。诸如 title、meta、style、link、base 这些，它们用来描述文档的一些基本信息。还有一类是诸如 section、nav 的标签，它们在视觉表现上跟 div 没有区别，但是各有各的适用场景，我们把它们称作是语义类标签。另外一类是 img、video、audio 之类的替换型媒体类标签，用来引入外部内容，平常开发中也很常用。再有就是表单类的，比如 input、button。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zakarycode.github.io/categories/front-end/"/>
    
      <category term="HTML" scheme="https://zakarycode.github.io/categories/front-end/HTML/"/>
    
    
      <category term="笔记" scheme="https://zakarycode.github.io/tags/record/"/>
    
      <category term="重学前端" scheme="https://zakarycode.github.io/tags/Relearning-front-end/"/>
    
      <category term="HTML" scheme="https://zakarycode.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>浏览器的实现原理与 API</title>
    <link href="https://zakarycode.github.io/archives/front-end/Browser/1555985227.html"/>
    <id>https://zakarycode.github.io/archives/front-end/Browser/1555985227.html</id>
    <published>2019-04-23T02:07:06.000Z</published>
    <updated>2019-04-23T02:07:06.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;shi-xian-yuan-li&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;从浏览器设计出发,按照解析、构建 DOM 树、计算
        
      
    
    </summary>
    
      <category term="前端" scheme="https://zakarycode.github.io/categories/front-end/"/>
    
      <category term="浏览器" scheme="https://zakarycode.github.io/categories/front-end/Browser/"/>
    
    
      <category term="笔记" scheme="https://zakarycode.github.io/tags/record/"/>
    
      <category term="重学前端" scheme="https://zakarycode.github.io/tags/Relearning-front-end/"/>
    
      <category term="性能" scheme="https://zakarycode.github.io/tags/performance/"/>
    
      <category term="浏览器" scheme="https://zakarycode.github.io/tags/Browser/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 内存管理</title>
    <link href="https://zakarycode.github.io/archives/front-end/JavaScript/1553130751.html"/>
    <id>https://zakarycode.github.io/archives/front-end/JavaScript/1553130751.html</id>
    <published>2019-03-21T01:12:31.000Z</published>
    <updated>2019-03-21T01:12:31.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;shi-yao-shi-nei-cun-xie-lou&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#什么是内存泄漏？&quot;&gt;&lt;/a&gt;什么是内存泄漏？&lt;/h2&gt;
&lt;p&gt;当我们决定不再使用某些内存时，由于错误的编码，未能使得 GC(Gabbage
        
      
    
    </summary>
    
      <category term="前端" scheme="https://zakarycode.github.io/categories/front-end/"/>
    
      <category term="JavaScript" scheme="https://zakarycode.github.io/categories/front-end/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://zakarycode.github.io/tags/JavaScript/"/>
    
      <category term="Web开发" scheme="https://zakarycode.github.io/tags/Web-Development/"/>
    
      <category term="浏览器" scheme="https://zakarycode.github.io/tags/Browser/"/>
    
      <category term="转载" scheme="https://zakarycode.github.io/tags/repost/"/>
    
      <category term="Storage" scheme="https://zakarycode.github.io/tags/Storage/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式速查表</title>
    <link href="https://zakarycode.github.io/archives/RegExp/1552532351.html"/>
    <id>https://zakarycode.github.io/archives/RegExp/1552532351.html</id>
    <published>2019-03-14T02:59:11.000Z</published>
    <updated>2019-03-21T02:32:12.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.debuggex.com/cheatsheet/regex/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 正则快速查询&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="正则" scheme="https://zakarycode.github.io/categories/RegExp/"/>
    
    
      <category term="笔记" scheme="https://zakarycode.github.io/tags/record/"/>
    
      <category term="归纳" scheme="https://zakarycode.github.io/tags/inductive/"/>
    
      <category term="正则" scheme="https://zakarycode.github.io/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>docker知识点整理</title>
    <link href="https://zakarycode.github.io/archives/docker/Continuous-Integration/1549248860.html"/>
    <id>https://zakarycode.github.io/archives/docker/Continuous-Integration/1549248860.html</id>
    <published>2019-02-04T02:54:20.000Z</published>
    <updated>2019-02-04T02:54:20.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;前段时间在做 Wechaty 相关的项目，使用 Docker 的体验远远要超出我之前的想象。不管是开发过程中还是开发之后交付的流程都会简化很多。&lt;/p&gt;
&lt;p&gt;以下是我目前一些整理，之后可能会有更深度的学习吧！&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="https://zakarycode.github.io/categories/docker/"/>
    
      <category term="持续集成" scheme="https://zakarycode.github.io/categories/docker/Continuous-Integration/"/>
    
    
      <category term="笔记" scheme="https://zakarycode.github.io/tags/record/"/>
    
      <category term="归纳" scheme="https://zakarycode.github.io/tags/inductive/"/>
    
      <category term="Nodejs" scheme="https://zakarycode.github.io/tags/Nodejs/"/>
    
      <category term="service" scheme="https://zakarycode.github.io/tags/service/"/>
    
      <category term="docker" scheme="https://zakarycode.github.io/tags/docker/"/>
    
      <category term="持续集成" scheme="https://zakarycode.github.io/tags/Continuous-Integration/"/>
    
      <category term="部署" scheme="https://zakarycode.github.io/tags/deployment/"/>
    
  </entry>
  
  <entry>
    <title>关于&#39;Bug-O&#39;表示法</title>
    <link href="https://zakarycode.github.io/archives/front-end/network-request/1549245751.html"/>
    <id>https://zakarycode.github.io/archives/front-end/network-request/1549245751.html</id>
    <published>2019-02-04T02:02:31.000Z</published>
    <updated>2019-02-09T12:37:39.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;当你在编写对性能敏感的代码时，最好记住他的算法复杂性。它通常表达用 &lt;a href=&quot;https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Big-O 表示法&lt;/a&gt;表示。&lt;/p&gt;
&lt;p&gt;Big-O 衡量代码在&lt;strong&gt;向其投入更多数据时会变慢多少&lt;/strong&gt;。例如，如果一个排序算法具有 O(&lt;em&gt;n2&lt;/em&gt;) 的复杂度，则排序 ×50 倍以上的项目大致将变慢 502 = 2,500 倍。Big O 不会给你一个确切的数字，但它可以帮助你理解算法&lt;em&gt;如何拓展&lt;/em&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zakarycode.github.io/categories/front-end/"/>
    
      <category term="网络请求" scheme="https://zakarycode.github.io/categories/front-end/network-request/"/>
    
    
      <category term="译文" scheme="https://zakarycode.github.io/tags/translation/"/>
    
      <category term="算法" scheme="https://zakarycode.github.io/tags/algorithm/"/>
    
      <category term="接口" scheme="https://zakarycode.github.io/tags/interface/"/>
    
      <category term="API" scheme="https://zakarycode.github.io/tags/API/"/>
    
      <category term="debug" scheme="https://zakarycode.github.io/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>为什么选择Hook而非……?</title>
    <link href="https://zakarycode.github.io/archives/front-end/frame/React/Hooks/1549245486.html"/>
    <id>https://zakarycode.github.io/archives/front-end/frame/React/Hooks/1549245486.html</id>
    <published>2019-02-04T01:58:06.000Z</published>
    <updated>2019-02-05T14:00:34.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;自从第一个关于&lt;a href=&quot;https://reactjs.org/hooks&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;React Hooks&lt;/a&gt;的 alpha 版本发布以来，有一个问题不断出现在讨论中：“为什么是 Hook 而非 &lt;em&gt;&amp;lt;一些其他的 API&amp;gt;&lt;/em&gt; ？”&lt;/p&gt;
&lt;p&gt;提示一下，以下的这些就&lt;em&gt;是&lt;/em&gt;Hooks：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#usestate&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;useState()&lt;/code&gt;&lt;/a&gt; 用于声明一个状态变量。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#useeffect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;useEffect()&lt;/code&gt;&lt;/a&gt; 用于声明一个补充规则(side effect)。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#usecontext&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;useContext()&lt;/code&gt;&lt;/a&gt; 用于读取一些上下文的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是仍有一些其他的 API，例如&lt;code&gt;React.memo()&lt;/code&gt;和&lt;code&gt;&amp;lt;Context.Provider&amp;gt;&lt;/code&gt;，它们&lt;em&gt;不是&lt;/em&gt;Hooks。通常提出的 Hook 版本会建议是&lt;em&gt;noncompositional&lt;/em&gt;或者&lt;em&gt;antimodular&lt;/em&gt;。本文将帮助你了解原因。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示：这篇文章对那些对 API 讨论感兴趣的人来说是一个深刻的话题，你不需要考虑使用 React 来提升效率！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zakarycode.github.io/categories/front-end/"/>
    
      <category term="框架" scheme="https://zakarycode.github.io/categories/front-end/frame/"/>
    
      <category term="React" scheme="https://zakarycode.github.io/categories/front-end/frame/React/"/>
    
      <category term="Hooks" scheme="https://zakarycode.github.io/categories/front-end/frame/React/Hooks/"/>
    
    
      <category term="JavaScript" scheme="https://zakarycode.github.io/tags/JavaScript/"/>
    
      <category term="ECMAScript" scheme="https://zakarycode.github.io/tags/ECMAScript/"/>
    
      <category term="Web开发" scheme="https://zakarycode.github.io/tags/Web-Development/"/>
    
      <category term="框架" scheme="https://zakarycode.github.io/tags/frame/"/>
    
      <category term="性能" scheme="https://zakarycode.github.io/tags/performance/"/>
    
      <category term="译文" scheme="https://zakarycode.github.io/tags/translation/"/>
    
      <category term="React" scheme="https://zakarycode.github.io/tags/React/"/>
    
      <category term="Programming" scheme="https://zakarycode.github.io/tags/Programming/"/>
    
      <category term="React Hooks" scheme="https://zakarycode.github.io/tags/React-Hooks/"/>
    
  </entry>
  
  <entry>
    <title>将React作为UI运行</title>
    <link href="https://zakarycode.github.io/archives/front-end/frame/React/1549201490.html"/>
    <id>https://zakarycode.github.io/archives/front-end/frame/React/1549201490.html</id>
    <published>2019-02-03T13:44:50.000Z</published>
    <updated>2019-03-25T03:29:18.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;大多数教程都将 React 作为 UI 库来引入。这逻辑上是对的，因为 React 就是一个 UI 库，标语中就是这么表述的！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/archives/front-end/frame/React/1549201490/React-homepage-screenshot.png&quot; alt=&quot;React homepage screenshot&quot;&gt;&lt;/p&gt;
&lt;p&gt;我之前写过关于创建&lt;a href=&quot;https://overreacted.io/zh-hans/the-elements-of-ui-engineering/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;用户界面&lt;/a&gt;的挑战。但这篇文章却是以不同的方式讨论 React——更像是&lt;a href=&quot;https://en.wikipedia.org/wiki/Runtime_system&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;运行时系统（programming runtime）&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这篇文章不会教你如何创建用户界面&lt;/strong&gt;。但是它可能会帮助你更深入地理解 React 编程模式。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;提示：如果你正在学习 React，请查看文档&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;⚠️&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这是个深度讨论帖 — 内容对初学者很不友好&lt;/strong&gt;。在这篇文章中，我从第一原则描述了大部分 React 编程模型，但并不会解释如何使用它——他是如何工作的。&lt;/p&gt;
&lt;p&gt;它面向有经验的程序猿和从事其他 UI 库的人，他们询问了在 React 中选择的一些权衡。我希望你们会觉得它很有用！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;很多人成功使用 React 多年但没有考虑大多数这些话题&lt;/strong&gt;。与其说这是&lt;a href=&quot;http://mrmrs.cc/writing/2016/04/21/developing-ui/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;以设计师为中心&lt;/a&gt;，这显然更会是以程序猿为中心的 React 视角。尽管我认为同时提供双方的资源并不会造成很大的负荷。&lt;/p&gt;
&lt;p&gt;在免责声明之后，让我们开始进入正题吧！&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zakarycode.github.io/categories/front-end/"/>
    
      <category term="框架" scheme="https://zakarycode.github.io/categories/front-end/frame/"/>
    
      <category term="React" scheme="https://zakarycode.github.io/categories/front-end/frame/React/"/>
    
    
      <category term="JavaScript" scheme="https://zakarycode.github.io/tags/JavaScript/"/>
    
      <category term="ECMAScript" scheme="https://zakarycode.github.io/tags/ECMAScript/"/>
    
      <category term="Web开发" scheme="https://zakarycode.github.io/tags/Web-Development/"/>
    
      <category term="框架" scheme="https://zakarycode.github.io/tags/frame/"/>
    
      <category term="性能" scheme="https://zakarycode.github.io/tags/performance/"/>
    
      <category term="译文" scheme="https://zakarycode.github.io/tags/translation/"/>
    
      <category term="React" scheme="https://zakarycode.github.io/tags/React/"/>
    
      <category term="Programming" scheme="https://zakarycode.github.io/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>年前一些随笔</title>
    <link href="https://zakarycode.github.io/archives/routine-life/essay/1549180675.html"/>
    <id>https://zakarycode.github.io/archives/routine-life/essay/1549180675.html</id>
    <published>2019-02-03T07:57:55.000Z</published>
    <updated>2019-02-03T07:57:55.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;  年关将至，过年的氛围却已经在不觉中被接踵而至的事情冲淡了，可能是上火车前的大扫除，也可能是春运火车上窒息般的体验、恶劣的吸烟乘客，又或是刚刚回到武汉对寒冷的不适……&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://zakarycode.github.io/categories/routine-life/"/>
    
      <category term="随笔" scheme="https://zakarycode.github.io/categories/routine-life/essay/"/>
    
    
      <category term="生活" scheme="https://zakarycode.github.io/tags/routine-life/"/>
    
      <category term="随笔" scheme="https://zakarycode.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>使用 React.lazy() 和 Suspense 提高React应用程序的性能</title>
    <link href="https://zakarycode.github.io/archives/front-end/frame/React/1546835543.html"/>
    <id>https://zakarycode.github.io/archives/front-end/frame/React/1546835543.html</id>
    <published>2019-01-07T04:32:23.000Z</published>
    <updated>2019-01-09T01:10:42.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Lazy loading💤 已经成为被广泛应用于加载提速的优化技术之一。延迟加载的前景有助于将某些 web app 出现程序性能问题的风险降至最低〽。&lt;/p&gt;
&lt;p&gt;在本文中，我们将研究如何使用 Lazy loading💤 来优化 React 应用程序中的加载时间。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zakarycode.github.io/categories/front-end/"/>
    
      <category term="框架" scheme="https://zakarycode.github.io/categories/front-end/frame/"/>
    
      <category term="React" scheme="https://zakarycode.github.io/categories/front-end/frame/React/"/>
    
    
      <category term="JavaScript" scheme="https://zakarycode.github.io/tags/JavaScript/"/>
    
      <category term="ECMAScript" scheme="https://zakarycode.github.io/tags/ECMAScript/"/>
    
      <category term="Web开发" scheme="https://zakarycode.github.io/tags/Web-Development/"/>
    
      <category term="框架" scheme="https://zakarycode.github.io/tags/frame/"/>
    
      <category term="性能" scheme="https://zakarycode.github.io/tags/performance/"/>
    
      <category term="译文" scheme="https://zakarycode.github.io/tags/translation/"/>
    
      <category term="React" scheme="https://zakarycode.github.io/tags/React/"/>
    
      <category term="Programming" scheme="https://zakarycode.github.io/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>覆盖模式——提高React组件的复用率</title>
    <link href="https://zakarycode.github.io/archives/front-end/frame/React/Component/1546591536.html"/>
    <id>https://zakarycode.github.io/archives/front-end/frame/React/Component/1546591536.html</id>
    <published>2019-01-04T08:45:36.000Z</published>
    <updated>2019-01-07T03:03:29.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/archives/front-end/frame/React/Component/1546591536/Overrides-React-Pattern.png&quot; alt=&quot;Overrides React Pattern&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zakarycode.github.io/categories/front-end/"/>
    
      <category term="框架" scheme="https://zakarycode.github.io/categories/front-end/frame/"/>
    
      <category term="React" scheme="https://zakarycode.github.io/categories/front-end/frame/React/"/>
    
      <category term="Component" scheme="https://zakarycode.github.io/categories/front-end/frame/React/Component/"/>
    
    
      <category term="CSS" scheme="https://zakarycode.github.io/tags/CSS/"/>
    
      <category term="JavaScript" scheme="https://zakarycode.github.io/tags/JavaScript/"/>
    
      <category term="ECMAScript" scheme="https://zakarycode.github.io/tags/ECMAScript/"/>
    
      <category term="框架" scheme="https://zakarycode.github.io/tags/frame/"/>
    
      <category term="译文" scheme="https://zakarycode.github.io/tags/translation/"/>
    
      <category term="React" scheme="https://zakarycode.github.io/tags/React/"/>
    
      <category term="组件样式" scheme="https://zakarycode.github.io/tags/Styled-Components/"/>
    
      <category term="CSS In JS" scheme="https://zakarycode.github.io/tags/CSS-In-JS/"/>
    
  </entry>
  
  <entry>
    <title>React PureComponent 使用指南</title>
    <link href="https://zakarycode.github.io/archives/front-end/frame/React/Component/1530426597.html"/>
    <id>https://zakarycode.github.io/archives/front-end/frame/React/Component/1530426597.html</id>
    <published>2018-07-01T06:29:57.000Z</published>
    <updated>2018-07-01T06:29:57.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;wei-shi-yao-shi-yong&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#为什么使用？&quot;&gt;&lt;/a&gt;为什么使用？&lt;/h2&gt;
&lt;p&gt;React15.3 中新加了一个 &lt;code&gt;PureComponent&lt;/code&gt;
        
      
    
    </summary>
    
      <category term="前端" scheme="https://zakarycode.github.io/categories/front-end/"/>
    
      <category term="框架" scheme="https://zakarycode.github.io/categories/front-end/frame/"/>
    
      <category term="React" scheme="https://zakarycode.github.io/categories/front-end/frame/React/"/>
    
      <category term="Component" scheme="https://zakarycode.github.io/categories/front-end/frame/React/Component/"/>
    
    
      <category term="JavaScript" scheme="https://zakarycode.github.io/tags/JavaScript/"/>
    
      <category term="ECMAScript" scheme="https://zakarycode.github.io/tags/ECMAScript/"/>
    
      <category term="框架" scheme="https://zakarycode.github.io/tags/frame/"/>
    
      <category term="React" scheme="https://zakarycode.github.io/tags/React/"/>
    
      <category term="转载" scheme="https://zakarycode.github.io/tags/repost/"/>
    
  </entry>
  
  <entry>
    <title>fetch使用整理</title>
    <link href="https://zakarycode.github.io/archives/front-end/network-request/fetch/1528704177.html"/>
    <id>https://zakarycode.github.io/archives/front-end/network-request/fetch/1528704177.html</id>
    <published>2018-06-11T08:02:57.000Z</published>
    <updated>2018-06-11T08:06:03.000Z</updated>
    
    <summary type="html">
    
      &lt;div id=&quot;content_views&quot; class=&quot;markdown_views&quot;&gt;
  &lt;h3 id=&quot;1-浏览器支持情况&quot;&gt;&lt;a name=&quot;t1&quot;&gt;&lt;/a&gt;浏览器支持情况&lt;/h3&gt;
  &lt;blockquote&gt;
  &lt;p&gt;fetch是相对较新的技术，当然就会存在浏览器兼容性的问题，当前各个浏览器低版本的情况下都是不被支持的，因此为了在所有主流浏览器中使用fetch 需要考虑 fetch 的 polyfill 了&lt;/p&gt;
  &lt;/blockquote&gt;
  &lt;pre class=&quot;prettyprint&quot; name=&quot;code&quot;&gt;
  &lt;code class=&quot;language-js hljs  has-numbering&quot;&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;es6-promise&#39;&lt;/span&gt;).polyfill();
&lt;span class=&quot;hljs-built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&#39;isomorphic-fetch&#39;&lt;/span&gt;);&lt;/code&gt;
  &lt;/pre&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zakarycode.github.io/categories/front-end/"/>
    
      <category term="网络请求" scheme="https://zakarycode.github.io/categories/front-end/network-request/"/>
    
      <category term="fetch" scheme="https://zakarycode.github.io/categories/front-end/network-request/fetch/"/>
    
    
      <category term="归纳" scheme="https://zakarycode.github.io/tags/inductive/"/>
    
      <category term="JavaScript" scheme="https://zakarycode.github.io/tags/JavaScript/"/>
    
      <category term="接口" scheme="https://zakarycode.github.io/tags/interface/"/>
    
      <category term="API" scheme="https://zakarycode.github.io/tags/API/"/>
    
      <category term="转载" scheme="https://zakarycode.github.io/tags/repost/"/>
    
      <category term="ES7" scheme="https://zakarycode.github.io/tags/ES7/"/>
    
      <category term="fetch" scheme="https://zakarycode.github.io/tags/fetch/"/>
    
  </entry>
  
  <entry>
    <title>关于第三方API跨域那些事</title>
    <link href="https://zakarycode.github.io/archives/Nodejs/1521617316.html"/>
    <id>https://zakarycode.github.io/archives/Nodejs/1521617316.html</id>
    <published>2018-03-21T07:28:36.000Z</published>
    <updated>2018-03-21T07:28:36.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我们在项目开发中，使用第三方接口难免会遇到一些跨域问题，而跨域这个话题网上已经讨论了无数遍了。常用的有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;jsonp&lt;/li&gt;
&lt;li&gt;cors&lt;/li&gt;
&lt;li&gt;服务端反向代理（因为服务端不存在跨域问题）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Nodejs" scheme="https://zakarycode.github.io/categories/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="https://zakarycode.github.io/tags/Nodejs/"/>
    
      <category term="接口" scheme="https://zakarycode.github.io/tags/interface/"/>
    
      <category term="API" scheme="https://zakarycode.github.io/tags/API/"/>
    
      <category term="转载" scheme="https://zakarycode.github.io/tags/repost/"/>
    
      <category term="express" scheme="https://zakarycode.github.io/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 项目徽章的添加和设置</title>
    <link href="https://zakarycode.github.io/archives/markdown/badge/1514942003.html"/>
    <id>https://zakarycode.github.io/archives/markdown/badge/1514942003.html</id>
    <published>2018-01-03T01:13:23.000Z</published>
    <updated>2018-01-03T01:13:23.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;许多同学在 GitHub 上发布了自己的开源项目，有辛苦开发的实用工具、构思巧妙的开源库、别具一格的 App、精心整理的示例代码等等。&lt;/p&gt;
&lt;p&gt;自己花了大把时间和精力构建的项目，当然是希望能够得到更多人的关注，被更多的人知晓或者使用。如何更好滴向他人展示自己的项目，介绍项目相关信息呢？用一些通用的小图标来描述项目相关信息不失为一种很棒的选择，几个好看的徽标能够为自己的项目说明增色不少！&lt;/p&gt;
&lt;p&gt;提示：因为文中某些示例需要 GitHub 的 Markdown 环境支持，所以如果遇到阅读问题，可以在 GitHub 查看，地址为 &lt;a href=&quot;https://github.com/EyreFree/EFArticles&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github.com/EyreFree/EF…&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="markdown" scheme="https://zakarycode.github.io/categories/markdown/"/>
    
      <category term="badge" scheme="https://zakarycode.github.io/categories/markdown/badge/"/>
    
    
      <category term="归纳" scheme="https://zakarycode.github.io/tags/inductive/"/>
    
      <category term="转载" scheme="https://zakarycode.github.io/tags/repost/"/>
    
      <category term="github" scheme="https://zakarycode.github.io/tags/github/"/>
    
      <category term="markdown" scheme="https://zakarycode.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>30分钟学会反向Ajax</title>
    <link href="https://zakarycode.github.io/archives/front-end/network-request/ajax/1514362414.html"/>
    <id>https://zakarycode.github.io/archives/front-end/network-request/ajax/1514362414.html</id>
    <published>2017-12-27T08:13:34.000Z</published>
    <updated>2017-12-27T08:39:19.000Z</updated>
    
    <summary type="html">
    
      &lt;div id=&quot;cnblogs_post_body&quot; class=&quot;blogpost-body&quot;&gt;
   &lt;p&gt;场景1：当有新邮件的时候，网页自动弹出提示信息而无需用户手动的刷新收件箱。&lt;/p&gt;
   &lt;p&gt;场景2：当用户的手机扫描完成页面中的二维码以后，页面会自动跳转。&lt;/p&gt;
   &lt;p&gt;场景3：在类似聊天室的环境中有任何人发言，所有登录用户都可以即时看见信息。&lt;/p&gt;
   &lt;p&gt;与传统的MVC模型请求必须从客户端发起由服务器响应相比，使用反向Ajax能够模拟服务器端主动向客户端推送事件从而提高用户体验。本文将分两个部分讨论反向Ajax技术，包括：Comet和WebSocket。文章旨在演示如何实现以上两种技术手段，Struts2或SpringMVC中的应用并未涉及。此外，Servlet的配置也采用注解的方式，相关知识大家可以参考其它资料。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="前端" scheme="https://zakarycode.github.io/categories/front-end/"/>
    
      <category term="网络请求" scheme="https://zakarycode.github.io/categories/front-end/network-request/"/>
    
      <category term="ajax" scheme="https://zakarycode.github.io/categories/front-end/network-request/ajax/"/>
    
    
      <category term="JavaScript" scheme="https://zakarycode.github.io/tags/JavaScript/"/>
    
      <category term="接口" scheme="https://zakarycode.github.io/tags/interface/"/>
    
      <category term="API" scheme="https://zakarycode.github.io/tags/API/"/>
    
      <category term="转载" scheme="https://zakarycode.github.io/tags/repost/"/>
    
      <category term="ajax" scheme="https://zakarycode.github.io/tags/ajax/"/>
    
  </entry>
  
</feed>
